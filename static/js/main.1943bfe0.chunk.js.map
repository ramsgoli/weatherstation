{"version":3,"sources":["Predict.js","App.js","serviceWorker.js","index.js","data/processed.csv","humidity.png","temperature.png"],"names":["SliderTooltip","createSliderWithTooltip","Slider","wrapperStyle","width","margin","predictHumidity","time","Math","floor","sin","predictTemperature","Predict","times","useState","setTime","predictedTime","startValue","stopValue","cardinality","arr","step","i","push","makeArr","length","predictedTemp","map","t","predictedHumidity","className","src","humidity","temperature","toTimeString","style","min","max","tipFormatter","value","Date","toLocaleString","onAfterChange","v","Range","Handle","App","x","yTemp","yHumidity","defaultStart","defaultEnd","setData","range","setRange","useEffect","csv","data","then","row","slice","y","name","layout","title","defaultValue","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.1943bfe0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport humidity from './humidity.png'\nimport temperature from './temperature.png'\n\nimport Tooltip from 'rc-tooltip';\nimport Slider from 'rc-slider';\nconst createSliderWithTooltip = Slider.createSliderWithTooltip\nconst SliderTooltip = createSliderWithTooltip(Slider)\n\nconst wrapperStyle = { width: 400, margin: 30 }\n\nconst predictHumidity = time => {\n  const freq = 0.2843\n  const phase = 2.54855\n  const amplitude = -8.84653\n  const mean = 68.5749\n  \n  return Math.floor((amplitude * Math.sin(freq * time + phase) + mean) * 100) / 100\n}\n\nconst predictTemperature = time => {\n  const freq = 0.307098 \n  const phase = -0.7720\n  const amplitude = -3.72685\n  const mean = 6.00972\n  \n  return Math.floor(((amplitude * Math.sin(freq * time + phase) + mean) * 9/5 + 32) * 100) / 100\n}\n\nfunction makeArr(startValue, stopValue, cardinality) {\n  var arr = [];\n  var step = (stopValue - startValue) / (cardinality - 1);\n  for (var i = 0; i < cardinality; i++) {\n    arr.push(startValue + (step * i));\n  }\n  return arr;\n}\n\nfunction Predict({times}) {\n  const [time, setTime] = useState(0)\n\n  const predictedTime = makeArr(0, 36, times.length)\n  const predictedTemp = predictedTime.map(t => predictTemperature(t))\n  const predictedHumidity = predictedTime.map(t => predictHumidity(t))\n\n  return (\n    <div className=\"predict\">\n      <h1>Predict the Weather</h1> \n      <div className=\"photo-container\">\n        <img src={humidity} />\n        <img src={temperature} />\n      </div>\n      <p>Predict the weather for <em>{times[time].toTimeString()}</em></p>\n      <div style={wrapperStyle}>\n        <SliderTooltip\n          min={0}\n          max={times.length}\n          tipFormatter={value => `${new Date(times[value]).toLocaleString()}`}\n          onAfterChange={v => setTime(v)}\n        /> \n      </div>\n      <p>We predict the temperature to be <em>{predictedTemp[time]} F</em>, and the humidity to be <em>{predictedHumidity[time]}%</em></p>\n    </div>\n  )\n}\n\nexport default Predict\n","// @flow\n\nimport React, { useState, useEffect } from 'react'\nimport { csv } from 'd3'\nimport Plot from 'react-plotly.js'\nimport data from './data/processed.csv'\nimport Tooltip from 'rc-tooltip'\nimport Slider from 'rc-slider'\n\nimport 'rc-slider/assets/index.css'\nimport 'rc-tooltip/assets/bootstrap.css'\nimport './App.css'\n\nimport Predict from './Predict'\n\nconst createSliderWithTooltip = Slider.createSliderWithTooltip\nconst Range = createSliderWithTooltip(Slider.Range)\nconst Handle = Slider.Handle\n\nconst wrapperStyle = { width: 400, margin: 50 }\n\nfunction makeArr(startValue, stopValue, cardinality) {\n  var arr = [];\n  var step = (stopValue - startValue) / (cardinality - 1);\n  for (var i = 0; i < cardinality; i++) {\n    arr.push(startValue + (step * i));\n  }\n  return arr;\n}\n\nconst predictTemperature = time => {\n  const freq = 0.307098 \n  const phase = -0.7720\n  const amplitude = -3.72685\n  const mean = 6.00972\n  \n  return Math.floor(((amplitude * Math.sin(freq * time + phase) + mean) * 9/5 + 32) * 100) / 100\n  \n}\n\nfunction App() {\n  const [{x, yTemp, yHumidity, defaultStart, defaultEnd, min, max}, setData] = useState({})\n  const [range, setRange] = useState([0, 0])\n\n  useEffect(() => {\n    csv(data).then(data => {\n\n      const x = data.map(row => new Date(row.time * 1000))\n      const yTemp = data.map(row => row.temperature * 9/5  + 32)\n      const yHumidity = data.map(row => row.humidity)\n\n      const min = 0 \n      const max = x.length - 1\n\n      const defaultStart = min\n      const defaultEnd = max\n\n      setData({x, yTemp, yHumidity, defaultStart, defaultEnd, min, max})\n      setRange([defaultStart, defaultEnd])\n    })\n  }, [])\n\n  if (!x) {\n    return null\n  }\n\n  const time = x.slice(range[0], range[1])\n  const predictedTime = makeArr(0, 36, x.length)\n  const predicted = predictedTime.map(t => predictTemperature(t))\n\n  return (\n    <div className=\"App\">\n      <div className=\"weather-station\">\n        <h1>Weather Station</h1>\n        <Plot \n          data={[\n            {\n              x: x.slice(range[0], range[1]),\n              y: yTemp.slice(range[0], range[1]),\n              name: 'temperature'\n            },\n            {\n              x: x.slice(range[0], range[1]),\n              y: yHumidity.slice(range[0], range[1]),\n              name: 'humidity'\n            }\n          ]}\n          layout={{title: 'Temperature vs Time'}}\n        />\n        <p>Show me the weather from <em>{new Date(x[range[0]]).toLocaleString()}</em> to <em>{new Date(x[range[1]]).toLocaleString()}</em></p>\n        <div style={wrapperStyle}>\n          <Range\n            min={min}\n            max={max}\n            defaultValue={[defaultStart, defaultEnd]}\n            tipFormatter={value => `${new Date(x[value])}`}\n            onAfterChange={v => setRange(v)}\n          />\n        </div>\n      </div>\n      <Predict\n        times={x}\n      />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/processed.c7d2efc9.csv\";","module.exports = __webpack_public_path__ + \"static/media/humidity.5cc9f5a2.png\";","module.exports = __webpack_public_path__ + \"static/media/temperature.40dcbfca.png\";"],"sourceRoot":""}